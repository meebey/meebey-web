[[!meta title="TorChat Protocol Dissection"]]
[[!sidebar content="""
[[!toc startlevel=2 levels=2]]
"""]]

***DISCLAIMER: This is NOT a specification but an external _analyses_ of the
TorChat protocol by stuyding the (Java) [source code implementation][source] of
it!*** I am _not_ related to the Tor or TorChat projects. I simply try to cover
the protocol as correctly as possible but don't cry if it contains errors or is
incomplete. I am using this as base for a C# based implementation for use in the
[Smuxi Messenger][smuxi].

  [source]: https://github.com/prof7bit/TorChat-Android/blob/master/TorChat/src/prof7bit/torchat/core/
  [smuxi]: https://www.smuxi.org/

## Transport ##

Uses TCP sockets to hidden services running on port 11009.

Peers send and receive messages on that TCP socket.

## Message Format ##

 * type: byte array
 * message seperator: 0x0a (LF)
 * decode as string:
   * replace '\r\n' with '\n' then '\n' with "\n" (LF)

## Message Commands ##

### ping ###

Format:

    ping <hidden_service_id> <session_token>

&lt;hidden_service_id&gt; is the hash of the public key used in the onion
network.

&lt;token&gt; is an arbitrary sized session token that the receiver must return
in the pong command (see below) to prove the autentication of the connection.

***WARNING: this session token has to be kept secret as this is the session key
of the authenticated connection!*** If this token leaks, anyone can impersonate
the identity of that hidden service / TorChat peer as long as the TorChat
application runs.

Example:

    ping mb4bc4jk4cj2fky4 31754944747097474078662100165902771331350515775810664422385852963171834014133

### pong ###

### client ###

### version ####

### add_me ###

### message ###

### status ###

Format:

    status <status>

&lt;status&gt; can be one of:

 * away
 * available
 * xa

Example:

    status available

### filename ###

### filedata ###

### filedata_ok ###

## Authentication / Handshake ##

TBD
